[{"name":"app.R","content":"require(lubridate)\nrequire(cranlogs)\nrequire(ggplot2)\nrequire(magrittr)\nrequire(ggnewscale)\nrequire(gridExtra)\n\nlibrary(shiny)\nrequire(curl)\n\npackages_thijs <- c(\"GUILDS\", \"nLTT\", \"STEPCAM\", \"junctions\", \"GenomeAdmixR\", \"nodeSub\", \"simRestore\", \"treestats\")\npackages_rampal <- c(\"DDD\", \"PBD\", \"SADISA\", \"DAMOCLES\", \"secsse\")\npackages_richel <- c(\"babette\", \"beautier\", \"tracerer\", \"mauricer\", \"mcbette\")\npackages_luis <- c(\"DAISIE\", \"DAISIEprep\", \"DAISIEmainland\")\n\n\n\ncheckPackages <- c(packages_thijs, packages_rampal, packages_richel, packages_luis)\n\n# starting_packages <- c(\"DDD\", \"secsse\", \"DAISIE\", \"treestats\")\nstarting_packages <- checkPackages\n\ncolors_thijs <- ggpubr::get_palette(\"GnBu\", k = length(packages_thijs))\ncolors_rampal <- ggpubr::get_palette(\"RdPu\", k = 2*length(packages_rampal))[-c(1:length(packages_rampal))]\ncolors_richel <- ggpubr::get_palette(\"OrRd\", k = 2*length(packages_richel))[-c(1:length(packages_richel))]\ncolors_luis   <- ggpubr::get_palette(\"BuGn\", k = 2*length(packages_luis))[-c(1:length(packages_luis))]\n\nused_colors <- c(colors_thijs, colors_rampal, colors_richel, colors_luis)\n\nlong_data <- cran_downloads(packages = checkPackages, from = \"2010-01-01\", to = lubridate::today())\n\n\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n  \n  # Application title\n  titlePanel(\"TRES CRAN downloads dashboard\"),\n  \n  # Sidebar with a slider input for number of bins \n  # Show a plot of the generated distribution\n  \n  sidebarLayout(\n    sidebarPanel(\n      radioButtons(\"set_thijs\", \"Thijs\", choices = c(\"Show\", \"Hide\"), selected = \"Show\", inline = TRUE),\n      radioButtons(\"set_rampal\", \"Rampal\", choices = c(\"Show\", \"Hide\"), selected = \"Show\", inline = TRUE),\n      radioButtons(\"set_luis\", \"Luis\", choices = c(\"Show\", \"Hide\"), selected = \"Show\", inline = TRUE),\n      radioButtons(\"set_richel\", \"Richel\", choices = c(\"Show\", \"Hide\"), selected = \"Show\", inline = TRUE),\n      width = 2\n    ),\n    \n    mainPanel(\n      tabsetPanel(type = \"tabs\", id = \"tabs1\",\n                  tabPanel(\"Weekly\", value = 1,\n                           plotOutput(\"weekPlot\")),\n                  tabPanel(\"Monthly\", value = 2,\n                           plotOutput(\"monthPlot\")),\n                  tabPanel(\"All time\", value = 3,\n                           plotOutput(\"mainPlot\")),\n                  tabPanel(\"Summary\", value = 4,\n                           plotOutput(\"summaryPlot\"))\n      )\n    )\n  )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n  \n  output$mainPlot <- renderPlot({\n    \n    long_data$group <- \"Thijs\"\n    long_data$group[long_data$package %in% packages_rampal] <- \"Rampal\"\n    long_data$group[long_data$package %in% packages_luis] <- \"Luis\"\n    long_data$group[long_data$package %in% packages_richel] <- \"Richel\"\n    \n    long_data2 <- \n      long_data %>%\n      group_by(package) %>%\n      arrange(date) %>%\n      mutate(\"cumsum\" = cumsum(count))\n    \n    add_group <- function(p1, group_name, used_colors) {\n      p1 <- p1 +\n        new_scale_color() +\n        \n        geom_line(\n          aes(x = date, y = cumsum, col = package),\n          filter(long_data2, group == group_name),\n          lwd = 1.3) +\n        scale_color_manual(values = used_colors) +\n        labs(color = group_name) +\n        guides(col = guide_legend(ncol = 2))\n      return(p1)\n    }\n    \n    \n    p1 <- long_data2 %>%\n      ggplot() +\n      theme_classic() +\n      xlab(\"Date\") +\n      ylab(\"Number of Downloads\") +\n      ggtitle(\"All Time\")\n    \n    use_thijs <- input$set_thijs == \"Show\"\n    use_rampal <- input$set_rampal == \"Show\"\n    use_luis <- input$set_luis == \"Show\"\n    use_richel <- input$set_richel == \"Show\"\n    \n    if (use_thijs) p1 <- add_group(p1, \"Thijs\", colors_thijs)\n    if (use_rampal) p1 <- add_group(p1, \"Rampal\", colors_rampal)\n    if (use_luis) p1 <- add_group(p1, \"Luis\", colors_luis)\n    if (use_richel) p1 <- add_group(p1, \"Richel\", colors_richel)\n    \n    print(p1)\n  })\n  \n  output$monthPlot <- renderPlot({\n    \n    long_data$group <- \"Thijs\"\n    long_data$group[long_data$package %in% packages_rampal] <- \"Rampal\"\n    long_data$group[long_data$package %in% packages_luis] <- \"Luis\"\n    long_data$group[long_data$package %in% packages_richel] <- \"Richel\"\n    \n    last_month <- lubridate::today() - 30\n    long_data2 <- \n      long_data %>%\n      filter(date >= last_month) %>%\n      group_by(package) %>%\n      arrange(date) %>%\n      mutate(\"cumsum\" = cumsum(count))\n    \n    add_group <- function(p1, group_name, used_colors) {\n      p1 <- p1 +\n        new_scale_color() +\n        \n        geom_line(\n          aes(x = date, y = cumsum, col = package),\n          filter(long_data2, group == group_name),\n          lwd = 1.3) +\n        scale_color_manual(values = used_colors) +\n        labs(color = group_name) +\n        guides(col = guide_legend(ncol = 2))\n      return(p1)\n    }\n    \n    \n    p1 <- long_data2 %>%\n      ggplot() +\n      theme_classic() +\n      xlab(\"Date\") +\n      ylab(\"Number of Downloads\") +\n      ggtitle(\"Last Month\")\n    \n    use_thijs <- input$set_thijs == \"Show\"\n    use_rampal <- input$set_rampal == \"Show\"\n    use_luis <- input$set_luis == \"Show\"\n    use_richel <- input$set_richel == \"Show\"\n    \n    if (use_thijs) p1 <- add_group(p1, \"Thijs\", colors_thijs)\n    if (use_rampal) p1 <- add_group(p1, \"Rampal\", colors_rampal)\n    if (use_luis) p1 <- add_group(p1, \"Luis\", colors_luis)\n    if (use_richel) p1 <- add_group(p1, \"Richel\", colors_richel)\n    \n    print(p1)\n  })\n  \n  output$weekPlot <- renderPlot({\n    \n    long_data$group <- \"Thijs\"\n    long_data$group[long_data$package %in% packages_rampal] <- \"Rampal\"\n    long_data$group[long_data$package %in% packages_luis] <- \"Luis\"\n    long_data$group[long_data$package %in% packages_richel] <- \"Richel\"\n    \n    last_month <- lubridate::today() - 7\n    \n    long_data2 <- \n      long_data %>%\n      filter(date >= last_month) %>%\n      group_by(package) %>%\n      arrange(date) %>%\n      mutate(\"cumsum\" = cumsum(count))\n    \n    add_group <- function(p1, group_name, used_colors) {\n      p1 <- p1 +\n        new_scale_color() +\n        \n        geom_line(\n          aes(x = date, y = cumsum, col = package),\n          filter(long_data2, group == group_name),\n          lwd = 1.3) +\n        scale_color_manual(values = used_colors) +\n        labs(color = group_name) +\n        guides(col = guide_legend(ncol = 2))\n      return(p1)\n    }\n    \n    \n    p1 <- long_data2 %>%\n      ggplot() +\n      theme_classic() +\n      xlab(\"Date\") +\n      ylab(\"Number of Downloads\") +\n      ggtitle(\"Last Week\")\n    \n    use_thijs <- input$set_thijs == \"Show\"\n    use_rampal <- input$set_rampal == \"Show\"\n    use_luis <- input$set_luis == \"Show\"\n    use_richel <- input$set_richel == \"Show\"\n    \n    if (use_thijs) p1 <- add_group(p1, \"Thijs\", colors_thijs)\n    if (use_rampal) p1 <- add_group(p1, \"Rampal\", colors_rampal)\n    if (use_luis) p1 <- add_group(p1, \"Luis\", colors_luis)\n    if (use_richel) p1 <- add_group(p1, \"Richel\", colors_richel)\n    \n    print(p1)\n  })\n  \n  output$summaryPlot <- renderPlot({\n    plots <- list()\n    \n    add_plot <- function(group_used, colors_used) {\n      long_data$group <- \"Thijs\"\n      long_data$group[long_data$package %in% packages_rampal] <- \"Rampal\"\n      long_data$group[long_data$package %in% packages_luis] <- \"Luis\"\n      long_data$group[long_data$package %in% packages_richel] <- \"Richel\"\n      \n      long_data2 <- long_data %>%\n        filter(group == group_used) %>%\n        filter(count > 0)\n      \n      p1 <- long_data2 %>%\n        ggplot(aes(x = reorder(package, count, FUN = median), \n                 y = count, fill = package)) +\n        geom_boxplot() +\n        theme_classic() +\n        scale_y_log10() +\n        scale_fill_manual(values = colors_used) +\n        xlab(\"\") +\n        ylab(\"Downloads per day\") +\n        theme(axis.text.x = element_text(angle = 90)) +\n        theme(legend.position = \"none\") +\n        ggtitle(group_used)\n      return(p1)\n    }\n    \n    use_thijs <- input$set_thijs == \"Show\"\n    use_rampal <- input$set_rampal == \"Show\"\n    use_luis <- input$set_luis == \"Show\"\n    use_richel <- input$set_richel == \"Show\"\n    \n    if (use_thijs) plots[[length(plots) + 1]] <- add_plot(\"Thijs\", colors_thijs)\n    if (use_rampal) plots[[length(plots) + 1]] <- add_plot(\"Rampal\", colors_rampal)\n    if (use_luis) plots[[length(plots) + 1]] <- add_plot(\"Luis\", colors_luis)\n    if (use_richel) plots[[length(plots) + 1]] <- add_plot(\"Richel\", colors_richel)\n    \n    # grid.arrange(plots, ncol = 1)\n    do.call(\"grid.arrange\", c(plots, ncol = 2))\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"old_app.R","content":"packages_thijs <- c(\"GUILDS\", \"nLTT\", \"STEPCAM\", \"junctions\", \"GenomeAdmixR\", \"nodeSub\", \"simRestore\", \"treestats\")\npackages_rampal <- c(\"DDD\", \"PBD\", \"SADISA\", \"DAMOCLES\", \"secsse\")\npackages_richel <- c(\"babette\", \"beautier\", \"tracerer\", \"mauricer\", \"mcbette\")\npackages_luis <- c(\"DAISIE\", \"DAISIEprep\", \"DAISIEmainland\")\n\n\n\ncheckPackages <- c(packages_thijs, packages_rampal, packages_richel, packages_luis)\n\n# starting_packages <- c(\"DDD\", \"secsse\", \"DAISIE\", \"treestats\")\nstarting_packages <- checkPackages\n\ncolors_thijs <- ggpubr::get_palette(\"GnBu\", k = 2*length(packages_thijs))[-c(1:length(packages_thijs))]\ncolors_rampal <- ggpubr::get_palette(\"RdPu\", k = length(packages_rampal))\ncolors_richel <- ggpubr::get_palette(\"OrRd\", k = length(packages_richel))\ncolors_luis   <- ggpubr::get_palette(\"BuGn\", k = length(packages_luis))\n\nused_colors <- c(colors_thijs, colors_rampal, colors_richel, colors_luis)\n\nlibrary(shiny)\n\nlibrary(cranlogs)\nlibrary(ggplot2)\nrequire(curl)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"TRES CRAN downloads dashboard\"),\n\n    # Sidebar with a slider input for number of bins \n    # Show a plot of the generated distribution\n    \n    sidebarLayout(\n      sidebarPanel(\n        textInput(\"packages\", \"packages\", \n                  value = paste(starting_packages, collapse = \", \")),\n      ),\n    \n    mainPanel(\n      tabsetPanel(type = \"tabs\", id = \"tabs1\",\n                  tabPanel(\"Weekly\", value = 1,\n                           plotOutput(\"weekPlot\")),\n                  tabPanel(\"Monthly\", value = 2,\n                           plotOutput(\"monthPlot\")),\n                  tabPanel(\"Summary\", value = 3,\n                           plotOutput(\"summaryPlot\")),\n                  tabPanel(\"Long term\", value = 4,\n                           plotOutput(\"longPlot\")),\n                  tabPanel(\"per_package\", value = 5,\n                           plotOutput(\"packagewise\"))\n      )\n    )\n  )\n)\n\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n  \n  pkgs <- reactive(strsplit(input$packages, \", ?\")[[1]])\n  \n  week_data <- reactive({\n    cran_downloads(packages = pkgs(), \"last-week\")\n  })\n  \n  month_data <- reactive({\n    cran_downloads(packages = pkgs(), \"last-month\")\n  })\n  \n  long_data <- reactive({\n    cran_downloads(packages = pkgs(), from = \"2010-01-01\", to = lubridate::today())\n  })\n  \n  output$weekPlot <- renderPlot({\n    vz <- week_data()\n    vz %>%\n      group_by(package) %>%\n      arrange(date) %>%\n      mutate(\"cumulative_count\" = cumsum(count)) %>%\n      ggplot(aes(x = date, y = cumulative_count, col = package)) +\n      geom_line(size = 1) +\n      theme_classic() +\n      scale_color_manual(values = used_colors) + \n    #  scale_color_brewer(type = \"qual\", palette = 3) +\n      ylab(\"Cumulative number of downloads\") +\n      ggtitle(\"Last week\")\n    })\n  \n  output$monthPlot <- renderPlot({\n    vz <- month_data()\n    vz %>%\n      group_by(package) %>%\n      arrange(date) %>%\n      mutate(\"cumulative_count\" = cumsum(count)) %>%\n      ggplot(aes(x = date, y = cumulative_count, col = package)) +\n      geom_line(size = 1) +\n      theme_classic() +\n      scale_color_manual(values = used_colors) + \n      #  scale_color_brewer(type = \"qual\", palette = 3) +\n      ylab(\"Cumulative number of downloads\") +\n      ggtitle(\"Last Month\")\n  })\n  \n  output$longPlot <- renderPlot({\n    vz <- long_data()\n    vz %>%\n      group_by(package) %>%\n      arrange(date) %>%\n      mutate(\"cumulative_count\" = cumsum(count)) %>%\n      ggplot(aes(x = date, y = cumulative_count, col = package)) +\n      geom_line(size = 1) +\n      theme_classic() +\n      scale_color_manual(values = used_colors) + \n      #  scale_color_brewer(type = \"qual\", palette = 3) +\n      ylab(\"Cumulative number of downloads\") + \n      ggtitle(\"Long time\")\n  })\n  \n  output$summaryPlot <- renderPlot({\n    vz <- long_data()\n    p1 <- vz %>%\n      filter(count > 0) %>%\n      ggplot(aes(x = reorder(package, count, FUN = median), y = count, fill = package)) +\n      geom_boxplot() +\n      theme_classic() +\n      scale_y_log10() +\n      theme(legend.position = \"none\") +\n      scale_color_manual(values = used_colors) + \n      #scale_color_brewer(type = \"qual\", palette = 3) +\n      ylab(\"Downloads per day\") +\n      xlab(\"\") +\n      theme(axis.text.x = element_text(angle = 90))\n    \n    p2 <- vz %>%\n      group_by(package) %>%\n      summarise(\"total\" = sum(count)) %>%\n      arrange(desc(total)) %>%\n      ggplot(aes(x = reorder(package, total, decreasing = TRUE), y = total, fill = package)) +\n      geom_bar(stat = \"identity\", ) + \n      theme(axis.text.x = element_text(angle = 90)) +\n      ylab(\"Total number of downloads\") +\n      xlab(\"\") +\n      theme_classic() +\n      theme(legend.position = \"none\") +\n      theme(axis.text.x = element_text(angle = 90))\n    \n    egg::ggarrange(p1, p2)\n  })\n}\n\nget_plots <- function(package_name) {\n  local_data <- cran_downloads(packages = pkgs(), from = \"2008-01-01\", to = lubridate::today())\n  to_remove <- min(which(local_data$count > 0))\n  local_data <- local_data[-c(1:to_remove), ]\n  \n  \n  local_data$year <- lubridate::year(local_data$date)\n  local_data$month <- lubridate::month(local_data$date)\n  \n  local_data$runsum <- cumsum(local_data$count)\n  local_data$lubri_date <- lubridate::as_date(local_data$date)\n  \n  p1 <- ggplot(local_data, aes(x = lubri_date, y = runsum)) +\n    geom_line() +\n    theme_classic() +\n    xlab(\"Time\") +\n    ylab(\"Number of Downloads\")\n  \n  p2 <- local_data %>%\n    group_by(year) %>%\n    summarise(\"total\" = sum(count)) %>%\n    ggplot(aes(x = year, y = total)) +\n      geom_bar(stat = \"identity\") +\n    ylab(\"Number of Downloads per Year\") +\n    xlab(\"Year\") +\n    theme_classic()\n  \n  d4 <- local_data %>%\n    group_by(year, month) %>%\n    summarise(\"total\" = sum(count)) %>%\n    mutate(\"number\" = paste0(year, \"-\", month))\n  \n  d4$number[d4$month < 10] <- paste0(d4$year[d4$month < 10], \"-0\", d4$month[d4$month < 10])\n  \n  p3 <- d4 %>%\n    ggplot(aes(x = number, y = total)) +\n    geom_bar(stat = \"identity\") +\n    ylab(\"Number of Downloads per Month\") +\n    xlab(\"Year\") +\n    theme_classic() +\n    theme(axis.text.x = element_text(angle = 90, size = 5))\n  p3\n  \n  egg::ggarrange(p1, p2, p3, nrow = 2)\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"}]
